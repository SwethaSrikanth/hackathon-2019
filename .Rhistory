setwd("~/drugAnalysis")
library(shiny)
library(dplyr)
library(tidyverse)
library(ggplot2)
#library(ggmap)
library(stringr)
#library(jpeg)
#library(grid)
#library(rsconnect)
library(data.table)
library(DT)
data <- read.csv("data/drugsComTrain_raw.csv",
stringsAsFactors = FALSE,
header = TRUE,
na.strings = c("", " ", "NA"))
data <- data[!grepl("users found this comment helpful", data$condition),]
data$drugName <- as.factor(data$drugName)
data$condition <- as.factor(data$condition)
data <-
data %>% separate(col = date, into = c("Date", "Month", "Year"), sep = "-", remove = FALSE, extra = "drop")
data <- within(data, rm(Date))
data$Year <- as.factor(data$Year)
data$Month <- as.factor(data$Month)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data$positive <- as.factor(data$rating> 8)
table(data$positive)
corpus = VCorpus(VectorSource(data$reviews))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords,stopwords("english"))
corpus = tm_map(corpus, stemDocument)
library(sentimentr)
install.packages("SentimentAnalysis")
install.packages("sentimentr")
library(sentimentr)
library(SentimentAnalysis)
corpus = VCorpus(VectorSource(data$reviews))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords,stopwords("english"))
corpus = tm_map(corpus, stemDocument)
install.packages("tm")
install.packages("RSentiment")
library(tm)
library(RSentiment)
corpus = VCorpus(VectorSource(data$reviews))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords,stopwords("english"))
corpus = tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, stripWhitespace)
frequencies = DocumentTermMatrix(corpus)
sparse = removeSparseTerms(frequencies, 0.99)
reviewsSparse = as.data.frame(as.matrix(sparse))
colnames(reviewsSparse) = make.names(colnames(reviewsSparse))
reviewsSparse$positive = data$positive
View(frequencies)
dtm <- TermDocumentMatrix(corpus)
mat <- as.matrix(dtm)
v <- sort(rowSums(mat),decreasing=TRUE)
View(dtm)
dtm
str(data)
corpus = VCorpus(VectorSource(data$reviews))
corpus = VCorpus(VectorSource(data$review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords,stopwords("english"))
corpus = tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, stripWhitespace)
frequencies = DocumentTermMatrix(corpus)
sparse = removeSparseTerms(frequencies, 0.99)
reviewsSparse = as.data.frame(as.matrix(sparse))
colnames(reviewsSparse) = make.names(colnames(reviewsSparse))
View(corpus)
View(frequencies)
reviewsSparse$positive = data$positive
View(reviewsSparse)
set.seed(174)
split = sample.split(reviewsSparse$positive, SplitRatio = 0.7)
reviewsSparse$split = split
train = subset(reviewsSparse, split==TRUE)
test = subset(reviewsSparse, split==FALSE)
nrow(train)
nrow(test)
install.packages("catools")
library(catools)
library(caTools)
install.packages("caTools")
library(caTools)
set.seed(174)
split = sample.split(reviewsSparse$positive, SplitRatio = 0.7)
reviewsSparse$split = split
train = subset(reviewsSparse, split==TRUE)
test = subset(reviewsSparse, split==FALSE)
nrow(train)
nrow(test)
table(train$positive)
54683/nrow(train)
install.packages("randomForest")
library(randomForest)
dtm <- TermDocumentMatrix(corpus)
mat <- as.matrix(dtm)
v <- sort(rowSums(mat),decreasing=TRUE)
wordcloud(words = set$word, freq = seta$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), main = title)
install.packages("tmap")
library(tmap)
wordcloud(words = set$word, freq = seta$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), main = title)
wordcloud2(words = set$word, freq = seta$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), main = title)
?wordcloud
install.packages("wordcloud")
library(wordcloud)
wordcloud2(words = set$word, freq = seta$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), main = title)
wordcloud(words = set$word, freq = seta$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), main = title)
wordcloud(words = set$word, freq = set$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), main = title)
wordcloud(words = set$word, freq = set$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
View(set)
dataset <- data.frame(word = names(v),freq=v)
wordcloud(words = dataset$word, freq = dataset$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = dataset$word, freq = dataset$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(5, "Dark2"))
wordcloud(words = dataset$word, freq = dataset$freq, min.freq = 5,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal( "Dark2"))
wordcloud(words = dataset$word, freq = dataset$freq, min.freq = 5,
max.words=200, random.order=FALSE)
?wordcloud
wordcloud(words = dataset$word, freq = dataset$freq, c(8,.5),min.freq = 5,
max.words=200, random.order=FALSE)
wordcloud(words = dataset$word, freq = dataset$freq, c(8,.5), 5, 200, random.order=FALSE)
wordcloud(words = dataset$word, freq = dataset$freq)
View(dataset)
dtm <- TermDocumentMatrix(corpus)
mat <- as.matrix(dtm)
rm(dataset)
rm(dtm)
rm(v)
rm(mat)
View(frequencies)
mat <- as.matrix(frequencies)
cartModel = rpart(positive ~ ., data=train, method="class")
prp(cartModel)
install.packages("rpart.plot")
library(rpart.plot)
cartModel = rpart(positive ~ ., data=train, method="class")
prp(cartModel)
predictCART <- predict(cartModel, newdata=test, type='class')
table(testSparse$positive, predictCART)
predictCART <- predict(cartModel, newdata=test, type='class')
table(test$positive, predictCART)
19045+10961
30006/nrow(train)
set.seed(123)
rf <- randomForest(positive ~ ., data = train, method = "class")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(data)
summary(data$drugName)
summary(data$drugName,data$rating)
summary(data$drugName,data$rating)
head(summary(data$drugName,data$rating))
a <- summary(data)
View(a)
a[a$Var2 == "drugName",]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- data[!data$condition == "Abdominal distension",]
a[a$Var2 == "drugName",]View(data)
View(data)
data <- data[!data$condition == "Abdominal distension",]
data <- read.csv("data/drugsComTrain_raw.csv",
stringsAsFactors = FALSE,
header = TRUE,
na.strings = c("", " ", "NA"))
data <- data[!grepl("users found this comment helpful", data$condition),]
data <- data[!data$condition == "Abdominal distension",]
data$drugName <- as.factor(data$drugName)
data$condition <- as.factor(data$condition)
data <-
data %>% separate(col = date, into = c("Date", "Month", "Year"), sep = "-", remove = FALSE, extra = "drop")
data <- within(data, rm(Date))
data$Year <- as.factor(data$Year)
data$Month <- as.factor(data$Month)
data <- data[~data$condition == "Abdominal distension",]
data <- data[-data$condition == "Abdominal distension",]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?aes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
